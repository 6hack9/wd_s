/*--------------------------------------------------------------
  Mixins
---------------------------------------------------------------*/


// REM with PX fallback
// Usage: @include rem(font-size, 16px);

@function parseInt($n) {
	@return $n / ($n * 0 + 1);
}

@mixin rem($property, $values) {
	$px : ();
	$rem: ();

	$root: 10;

	@each $value in $values {
		@if $value == 0 or $value == auto {
			$px : append($px , $value);
			$rem: append($rem, $value);
		}

		@else if type-of($value) == number {
			$unit: unit($value);
			$val: parseInt($value);

			@if $unit == "px" {
				$px : append($px,  $value);
				$rem: append($rem, ($val / $root + rem));
			}

			@if $unit == "rem" {
				$px : append($px,  ($val * $root + px));
				$rem: append($rem, $value);
			}
		}

		@else {
			$px : append($px,  $value);
			$rem: append($rem, $value);
		}
	}

	@if $px == $rem {
		#{$property}: $px;
	} @else {
		#{$property}: $px;
		#{$property}: $rem;
	}
}

@function rem($value) {
	$root: $font-size;
	$val: parseInt($value);
	$return: ();

	@if unit($value) == "px" {
		$return: append($return, ($val / $root + rem));
	} @else {
		$return: append($return, ($val * $root + px));
	}

	@return $return;
}


// Center Block
// Usage @include center-block;

@mixin center-block {
	display: block;
	margin: 0 auto;
}


// Define our breakpoints in $breakpoints variable
// and assign key value pairs in ems.

$breakpoints: (
	large-desktop: 71.25em,
	desktop: 48em,
	tablet: 30em,
);


// Media Queries using Sass List Maps
// Usage: @include wider-than(desktop);

@mixin wider-than($screen-size) {
	@if map-has-key($breakpoints, $screen-size) {
		@media (min-width: map-get($breakpoints, $screen-size)) {
			@content;
		}
	} @else if ($screen-size) {
		@media (min-width: $screen-size) {
			@content;
		}
	} @else {
		// Debugging - can be used thanks to map-has-key() instead of loop
		@warn "Breakpoint '#{$screen-size}' does not exist!"
	}
}


// For adding font icons to elements using CSS pseudo-elements
// http://jaydenseric.com/blog/fun-with-sass-and-font-icons
//
// Example usage:
//    .my-cool-title {
//        @include icon(before, '\f04b') {
//            padding-left: 3px;
//        }
//    }
//
// 	BE SURE TO ADD YOUR ICON TO _variables.scss, and then you can do this
//    .menu-toggle {
//        @include icon(before, favicon) {
//            padding-left: 3px;
//        }
//    }
//
//  Be sure to declare your $font-icon font-family in variables.scss

@mixin icon($position: before, $icon: false, $styles: true) {
    @if $position == both {
        $position: 'before, &:after';
    }
    // Either a :before or :after pseudo-element, or both, defaulting to :before
    &:#{$position} {
        @if $icon {
            // A particular icon has been specified
            content: "#{map-get($icons, $icon)}";
        }
        @if $styles {
            // Supportive icon styles required
            speak: none;
            font-style: normal;
            font-weight: normal;
            font-family: $font-icon;
        }
        // Include any extra rules supplied for the pseudo-element
        @content;
    }
}
